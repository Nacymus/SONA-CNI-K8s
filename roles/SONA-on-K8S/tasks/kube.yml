---
- name: Set iptable configuration
  ansible.builtin.blockinfile:
    path: /etc/sysctl.d/k8s.conf
    create: yes
    block: |
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: Stop and Disable firewalld service
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: no

- name:  turn off memory swapping
  ansible.builtin.command:
    cmd: swapoff -a

- name:  turn off memory swapping
  ansible.builtin.command:
    cmd: sed -i '/swap/d' /etc/fstab

- name: Restart server
  ansible.builtin.reboot:
    test_command: "echo '$HOSTNAME is up again'"

- name: Write block of lines to the kubernetes repo file
  ansible.builtin.blockinfile:
    path: /etc/yum.repos.d/kubernetes.repo
    create: yes
    insertafter: EOF
    block: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      exclude=kube*

- name: Install kubectl and kubeadm
  ansible.builtin.command:
    cmd: yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

- name: edit docker systemd unit
  ansible.builtin.command:
    cmd: sed -i '/ExecStart=/ s/$/ --exec-opt native.cgroupdriver=systemd/' /etc/systemd/system/multi-user.target.wants/docker.service

- name: restart docker service
  ansible.builtin.systemd:
    name: docker
    daemon_reload: yes
    state: restarted

- name: Start and enable kubelet kubectl service
  ansible.builtin.systemd:
     name: kubelet
     enabled: yes
     state: started

- name: edit kuebelet systemd unit
  ansible.builtin.command:
    cmd: sed -i '/ExecStart=/ s/$/ --network-plugin=cni/' /etc/systemd/system/multi-user.target.wants/kubelet.service

- name: restart kubelet service
  ansible.builtin.systemd:
    name: kubelet
    daemon_reload: yes
    state: restarted

- name: Master node start-up
  block:
    - name: Initiate the K8s cluster
      ansible.builtin.command:
        cmd: "{{ item }}"
      with_items:
      - kubeadm init --apiserver-advertise-address="{{ hostvars['K8s-master'].ansible_eth1.ipv4.address }}" --pod-network-cidr="{{ pod_cidr }}" --token={{ cluster_token }}
      - mkdir -p $HOME/.kube
      - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      - chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Fetch the kube conf file on local
      ansible.builtin.fetch:
        src: "/etc/kubernetes/admin.conf"
        dest: "/tmp/"
  when: inventory_hostname == "K8s-master"

- name: Worker node configuration
  block:
    - name: JOIN workers to cluster
      ansible.builtin.command:
        cmd: "{{ item }}"
      with_items:
      - kubeadm join --token "{{ cluster_token }}" --discovery-token-unsafe-skip-ca-verification {{ hostvars['K8s-master'].ansible_eth1.ipv4.address }}:{{ apiserver_port }}
      - mkdir -p $HOME/.kube
      - touch $HOME/.kube/config
      - chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Copy the files from managing host to workers
      ansible.builtin.copy:
        src: "/tmp/K8s-master/etc/kubernetes/admin.conf"
        dest: "$HOME/.kube/config"
        owner: root
        group: root
        mode: '755'
  when: inventory_hostname != "K8s-master"

- name: Delete kubeproxy daemonset
  ansible.builtin.command:
    cmd: kubectl delete ds kube-proxy -n kube-system
  when: inventory_hostname == "K8s-master"

- name: Remove iptables rules
  ansible.builtin.shell: "{{ item }}"
  with_items:
  - iptables -t nat -F
  - iptables -F
  - iptables -X

- name: Install ONOS on master node
  block:
    - name: Create onos.yml file on a temporary file in host
      ansible.builtin.template:
        src: onos.yml.j2
        dest: /tmp/onos.yml

    - name: Apply the onos manifest
      ansible.builtin.command:
        cmd: "{{ items }}"
      with_items:
      - kubectl apply -f /tmp/onos.yml
      - kubectl get pods -n kube-system
  when: inventory_hostname == "K8s-master"






